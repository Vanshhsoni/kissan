# Generated by Django 5.1.6 on 2025-09-12 04:46

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('mobile', models.CharField(max_length=15, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('acreage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('district', models.CharField(blank=True, choices=[('തിരുവനന്തപുരം', 'തിരുവനന്തപുരം'), ('കൊല്ലം', 'കൊല്ലം'), ('പത്തനംതിട്ട', 'പത്തനംതിട്ട'), ('ആലപ്പുഴ', 'ആലപ്പുഴ'), ('കോട്ടയം', 'കോട്ടയം'), ('ഇടുക്കി', 'ഇടുക്കി'), ('എറണാകുളം', 'എറണാകുളം'), ('ത്രിശ്ശൂർ', 'ത്രിശ്ശൂർ'), ('പാലക്കാട്', 'പാലക്കാട്'), ('മലപ്പുറം', 'മലപ്പുറം'), ('കോഴിക്കോട്', 'കോഴിക്കോട്'), ('വയനാട്', 'വയനാട്'), ('കണ്ണൂർ', 'കണ്ണൂർ'), ('കാസർഗോഡ്', 'കാസർഗോഡ്')], max_length=50, null=True)),
                ('pincode', models.CharField(blank=True, max_length=6, null=True)),
                ('soil_type', models.CharField(blank=True, choices=[('മണൽ', 'മണൽ'), ('ചെങ്കൽ', 'ചെങ്കൽ'), ('കറുത്ത മണ്ണ്', 'കറുത്ത മണ്ണ്'), ('ചെങ്കൽ മണ്ണ്', 'ചെങ്കൽ മണ്ണ്'), ('അല്ലുവിയൽ', 'അല്ലുവിയൽ')], max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
